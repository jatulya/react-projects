User authentication
-------------------
1. Create a new react project
2. In the app.js, create a basic login and signup form
3. npm install firebase
4. Create firebase-config.js file in src folder. It contains  your Firebase config object with apiKey, authDomain to connect with Firebase database. Necessary for every firebase project
5. Start a new project in the firebase site
6. we need to configure  our project with info from the firebase console
    a. create an app in the started project on the Firebase Console (the open and closed tags)
    b. copy the variable generated to a .env file. copy the remaining code to firebase-config.js
    [ npm install dotenv
      import dotenv from 'dotenv';
      dotenv.config();
      const env_Var = process.env.vars]
    c. export the variable used with function getAuth (auth)
7. Go to authentication, click on getStarted, choose the method of authentication and enable it.
8. Create functions in App.js for the buttons
9. import Necessary functions from firebase/auth

Integrating Firestore
-------------------
1. Go to Firestore database and create a database
2. Change the rules to if true: to allow both read and write
3. In the start collection, add table name, primary key id and fields. document => tuples or rows
4. get the list of students (table name) from the db whenever the page renders using useEffect
5. Store the values using useState and perform crud by importing functions from firebase/Firestore

Adding Images
--------------
1. install uuid for generating random names for images to be stored
2. Go to Storage in firebase site and get started
3. Change the rules to public so anyone can access them
4. import {getStorage} and create a storage
5. Create a frontend to upload the images.
  <input 
    type="file"
    onChange={(e)=> {setImgUpload(e.target.files[0])}} 
  />

Python code integration
------------------------
1. Create a new folder for backend and create a py file server.py
2. Create a virtual environment in the this folder
    python -m venv myvenv
3. Activate the myvenv
    windows : .\myvenv\Scripts\activate
    linux   : source myvenv/bin/activate
4.  Install flask in the virtual environment
    pip install Flask
    change the interpreter to the myvenv/Scripts/python.exe 
      Ctrl + shift + P
      python : Select  Interpreter
5. Create a flask application and set the routes
6. In the package.json of the react application, add "proxy" : "http://127.0.0.1:5000" (the port where backend runs) 




